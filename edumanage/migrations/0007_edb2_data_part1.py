# -*- coding: utf-8 -*-
# Generated by Django 1.11.23 on 2019-12-08 07:14
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations
from django.db.models import OuterRef, Subquery, F
from django.utils.functional import curry

from . import AppAwareRunPython

def migrate_addresses(apps, schema_editor, app_name,
                      model_name, forwards=True,
                      default_lang=getattr(settings, 'LANGUAGE_CODE', 'en')):
    db_alias = schema_editor.connection.alias
    db_model = apps.get_model(app_name, model_name)
    ct_model = apps.get_model('contenttypes.ContentType')
    db_model_ct = ct_model.objects.get_for_model(db_model)
    address_model = apps.get_model(app_name, 'Address_i18n')
    if forwards:
        for obj in db_model.objects.using(db_alias).all():
            # Going through the reverse Generic Relation doesn't work in
            # migrations: obj.address.get_or_create(...)
            address_model.objects.using(db_alias).get_or_create(
                content_type=db_model_ct,
                object_id=obj.id,
                street=obj.address_street,
                city=obj.address_city,
                lang=default_lang
            )
    else:
        address_sq = address_model.objects.using(db_alias).filter(
            object_id=OuterRef('pk'),
            content_type=db_model_ct,
            lang=default_lang
        )
        db_model.objects.using(db_alias).annotate(
            sq_address_street=Subquery(address_sq.values('street')[:1]),
            sq_address_city=Subquery(address_sq.values('city')[:1])
        ).update(
            address_street=F('sq_address_street'),
            address_city=F('sq_address_city')
        )

def migrate_serviceloc_tags(apps, schema_editor, app_name, forwards=True):
    tags = ['port_restrict', 'transp_proxy', 'IPv6', 'NAT']
    db_alias = schema_editor.connection.alias
    db_model = apps.get_model(app_name, 'ServiceLoc')
    for obj in db_model.objects.using(db_alias).all():
        if forwards:
            obj.tag = [
                tag for tag in tags if getattr(obj, tag)
            ]
        else:
            for tag, value in (
                    (tag, tag in obj.tag)
                    for tag in tags
            ):
                setattr(obj, tag, value)
        obj.save()


class Migration(migrations.Migration):

    dependencies = [
        ('edumanage', '0006_edb2_schema_part2_coordinates'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        AppAwareRunPython(
            curry(migrate_addresses, model_name='Realm', forwards=True),
            reverse_code=curry(migrate_addresses, model_name='Realm', forwards=False),
            hints={'model_name': 'realm'},
        ),
        AppAwareRunPython(
            curry(migrate_addresses, model_name='InstitutionDetails', forwards=True),
            reverse_code=curry(migrate_addresses, model_name='InstitutionDetails', forwards=False),
            hints={'model_name': 'institutiondetails'},
        ),
        AppAwareRunPython(
            curry(migrate_addresses, model_name='ServiceLoc', forwards=True),
            reverse_code=curry(migrate_addresses, model_name='ServiceLoc', forwards=False),
            hints={'model_name': 'serviceloc'},
        ),
        AppAwareRunPython(
            curry(migrate_serviceloc_tags, forwards=True),
            reverse_code=curry(migrate_serviceloc_tags, forwards=False),
            hints={'model_name': 'serviceloc'},
        ),
    ]
